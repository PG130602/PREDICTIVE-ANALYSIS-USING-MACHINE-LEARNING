# -*- coding: utf-8 -*-
"""TASK 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_9_xrSKJwOndhh3ESLbjfz26fSENdoqg

# TASK 2

## 1.Importing Libraries
"""

# Basic libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer

# Models
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC

# Evaluation
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
from sklearn.model_selection import cross_val_score, GridSearchCV
import joblib

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Loan_default.csv")

pd.set_option('display.max_columns', None)

"""## 2.Exploratory data analysis and Data CLeaning"""

df.head()

df.tail()

df.describe

df.shape

df.info()

df.isnull().sum()

target_column = 'Default'  # Correct column name from your dataset
sns.countplot(x=target_column, data=df)
plt.title('Target Distribution')
plt.show()

# Correlation heatmap
numeric_df = df.select_dtypes(include=['number'])
plt.figure(figsize=(12, 10))
sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

"""## 3.Data Cleaning & Feature Engineering"""

# Drop ID-like columns if any
if 'id' in df.columns:
    df.drop('id', axis=1, inplace=True)

# Impute missing values
imputer = SimpleImputer(strategy='most_frequent')
df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

# Convert object types
categorical_cols = df.select_dtypes(include='object').columns
le = LabelEncoder()
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

"""## 4. Feature Scaling & Train-Test Split"""

X = df.drop(target_column, axis=1)
y = df[target_column]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""## 5: Model Training & Evaluation (Multiple Models)"""

# Train models
models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(),
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    score = accuracy_score(y_test, y_pred)
    results[name] = score
    print(f"ðŸ”¹ {name} Accuracy: {score:.4f}")
    print(classification_report(y_test, y_pred))

"""## 6. ROC-AUC & Curve"""

plt.figure(figsize=(10,6))

for name, model in models.items():
    probs = model.predict_proba(X_test)[:,1]
    fpr, tpr, _ = roc_curve(y_test, probs)
    auc = roc_auc_score(y_test, probs)
    plt.plot(fpr, tpr, label=f"{name} (AUC = {auc:.2f})")

plt.plot([0,1], [0,1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curves")
plt.legend()
plt.show()

"""## 8.Feature Importance"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)

# Save model and scaler
best_model = RandomForestClassifier()
best_model.fit(X_train_scaled, y_train)
joblib.dump(best_model, "loan_default_model.pkl")
joblib.dump(scaler, "scaler.pkl")

"""## 9. Cross-Validation"""

model = RandomForestClassifier(n_estimators=50, random_state=42)
scores = cross_val_score(model, X, y, cv=5)
print("CV Accuracy:", scores.mean())

accuracies = []

for i in range(5):
    X_train_cv, X_test_cv, y_train_cv, y_test_cv = train_test_split(X, y, test_size=0.2, random_state=i)
    model = RandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)
    model.fit(X_train_cv, y_train_cv)
    y_pred_cv = model.predict(X_test_cv)
    acc = accuracy_score(y_test_cv, y_pred_cv)
    accuracies.append(acc)

print("Average CV Accuracy (approx):", np.mean(accuracies))

"""## 10. Confusion Matrix Visualization"""

from sklearn.metrics import ConfusionMatrixDisplay

ConfusionMatrixDisplay.from_estimator(model, X_test, y_test)
plt.title(f"Confusion Matrix - {name}")
plt.show()

from sklearn.metrics import confusion_matrix

y_pred = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

